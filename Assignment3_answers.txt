Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do? 
    public: Accessible from any other code.
    private: Accessible only within the containing class or struct.
    protected: Accessible within the containing class or struct, and by derived classes.
    internal: Accessible within the same assembly, but not from another assembly.
    protected internal: Accessible within the same assembly and from derived classes.
    private protected: Accessible within the containing class or struct, and by derived classes within the same assembly.

2.What is the difference between the static, const, and readonly keywords when applied to a type member?
    static: The member belongs to the type itself rather than to a specific object.
    const: The value is constant and cannot be changed. It is evaluated at compile-time.
    readonly: The value can be assigned only during declaration or in a constructor. It is evaluated at runtime.

3. What does a constructor do?
    A constructor initializes an instance of a class. It can set default values, allocate resources, and perform other setup tasks.

4. Why is the partial keyword useful?
    The partial keyword allows the definition of a class, struct, or interface to be split into multiple files. It is useful for organizing code, especially in large projects.

5. What is a tuple?
    A tuple is a data structure that can hold a fixed number of items of different types. In C#, it is defined using Tuple classes or the (type1, type2, ...) syntax.

6. What does the C# record keyword do?
    The record keyword defines a reference type that provides built-in functionality for value equality, immutability, and concise syntax for defining data-carrying types.

7. What does overloading and overriding mean?
    Overloading: Defining multiple methods with the same name but different parameters within the same scope.
    Overriding: Providing a new implementation for a method defined in a base class in a derived class, using the override keyword.

8. What is the difference between a field and a property?
    A field is a variable that is directly accessible.
    A property provides a flexible mechanism to read, write, or compute the value of a private field, often using get and set accessors.
9. How do you make a method parameter optional?
    You can make a method parameter optional by providing a default value in the method signature. Example: void MyMethod(int x = 0)

10. What is an interface and how is it different from abstract class?
    An interface defines a contract with methods, properties, events, or indexers but does not provide any implementation.
    An abstract class can provide both fully implemented methods and abstract methods (no implementation).

11. What accessibility level are members of an interface?
    All members of an interface are implicitly public and cannot have any access modifiers.
    
12. True. Polymorphism allows derived classes to provide different implementations of the same method.

13. True. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.

14. True. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.

15. False. Abstract methods can be used in a normal (non-abstract) class. 

16. True. Normal (non-abstract) methods can be used in an abstract class. 

17. True. Derived classes can override methods that were virtual in the base class. 

18. True. Derived classes can override methods that were abstract in the base class. 

19. False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.

20. False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.

21. True. A class that implements an interface is allowed to have other members that
arenâ€™t defined in the interface.

22. False. A class can have more than one base class.

23. True. A class can implement more than one interface.